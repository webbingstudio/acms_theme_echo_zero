@mixin clearfix() {
	&:before,
	&:after {
	  content: "";
	  display: table;
	}
	&:after {
	  clear: both;
	}
}

@mixin imgfit($type:null) {
  display: block;
  height: auto;
  margin: 0 auto;
  @if ($type == cover) {
    width: 100%;
  } @else {
    max-width: 100%;
  }
}

@mixin absolute($position:tl, $offsetX:0, $offsetY:0, $z:null) {
  position: absolute;
  @if ($position == tl) {
    left: $offsetX;
    top: $offsetY;
  }
  @if ($position == tr) {
    right: $offsetX;
    top: $offsetY;
  }
  @if ($position == bl) {
    left: $offsetX;
    bottom: $offsetY;
  }
  @if ($position == br) {
    right: $offsetX;
    bottom: $offsetY;
  }
  @if ($z) {
    z-index: $z;
  }
}


@mixin sprites($type, $file, $width, $height, $imgwidth:100%, $imgheight:100%, $position:center center) {

  @if ($type == icon) {
      content: "";
      display: inline-block;
      width: $width;
      height: $height;
      vertical-align: middle;
  }
  background: url(../images/#{$file}) $position no-repeat;
  background-size: $imgwidth $imgheight;

}


@mixin animation($delay, $duration, $animation-name) {
  -webkit-animation-delay: $delay;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation-name;
  -webkit-animation-fill-mode: forwards;

  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-name: $animation-name;
  -moz-animation-fill-mode: forwards;

  -o-animation-delay: $delay;
  -o-animation-duration: $duration;
  -o-animation-name: $animation-name;
  -o-animation-fill-mode: forwards;

  animation-delay: $delay;
  animation-duration: $duration;
  animation-name: $animation-name;
  animation-fill-mode: forwards;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }

  @-moz-keyframes #{$animation-name} {
    @content;
  }

  @-o-keyframes #{$animation-name} {
    @content;
  }

  @keyframes #{$animation-name} {
    @content;
  }
}


@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.1, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-up($name, $breakpoints) {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin make-container($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix();
}

@mixin make-row($gutter: $grid-gutter-width) {
  @include clearfix();
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}

@mixin make-col($gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-col-span($size, $columns: $grid-columns) {
  width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  %grid-column {
    position: relative;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }
  @each $breakpoint in map-keys($breakpoints) {
    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }
    @include media-breakpoint-up($breakpoint) {
      %grid-column-float-#{$breakpoint} {
        float: left;
      }
      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @extend %grid-column-float-#{$breakpoint};
          @include make-col-span($i, $columns);
        }
      }
      @each $modifier in (pull, push, offset) {
        @for $i from 0 through $columns {
          .col-#{$breakpoint}-#{$modifier}-#{$i} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
      }
    }
  }
}

@mixin button-variant($color, $background, $border, $hover-background, $hover-border, $active-background, $active-border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:focus,
  &.focus,
  &:active,
  &.active,
  .open > &.dropdown-toggle {
    color: $color;
    background-color: $active-background;
        border-color: $active-border;
  }
  &:hover,
  &.hover {
    color: $color;
    background-color: $hover-background;
        border-color: $hover-border;
  }
  &.disabled,
  &:disabled,
  fieldset[disabled] & {
    &:focus,
    &.focus {
      background-color: $background;
          border-color: $border;
    }
    &:hover,
    &.hover {
      background-color: $background;
          border-color: $border;
    }
  }
}

